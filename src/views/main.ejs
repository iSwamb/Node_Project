<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>NodeJS - Projet Films - Main</title>
</head>
<body>
<h1>Liste des films</h1>

<table id="movies" border="1">
    <thead>
    <tr>
        <th>Titre</th>
        <th>Description</th>
        <th>Date de sortie</th>
        <th>Réalisateur</th>
        <th>Actions</th>
    </tr>
    </thead>
    <tbody>
    <% movies.forEach((movie) => { %>
        <tr class="movie" data-id="<%= movie.id %>">
            <td><%= movie.title %></td>
            <td><%= movie.description %></td>
            <td><%= movie.releaseDate %></td>
            <td><%= movie.director %></td>
            <td>
                <% if (user) { %>
                    <button class="add-to-favorites">Ajouter aux favoris</button>
                    <button class="remove-from-favorites">Retirer des favoris</button>
                <% } %>

                <% if (user && user.isAdmin) { %>
                    <button class="edit-movie">Modifier</button>
                    <button class="delete-movie">Supprimer</button>
                <% } %>
            </td>
        </tr>
    <% }); %>
    </tbody>
</table>

<% if (user && user.isAdmin) { %>
    <h2>Ajouter un film</h2>
    <form id="addMovieForm">
        <input type="hidden" name="userId" value="<%= user.id %>">
        <input type="text" name="title" placeholder="Titre">
        <input type="text" name="description" placeholder="Description">
        <input type="date" name="releaseDate" placeholder="Date de sortie">
        <input type="text" name="director" placeholder="Réalisateur">
        <button type="submit">Ajouter un film</button>
    </form>

<% } %>

<script>
    // Sélectionnez tous les boutons et stockez-les dans des variables
    const addToFavoritesButtons = document.querySelectorAll('.add-to-favorites');
    const removeFromFavoritesButtons = document.querySelectorAll('.remove-from-favorites');
    const addMovieButton = document.querySelector('.add-movie');
    const editMovieButtons = document.querySelectorAll('.edit-movie');
    const deleteMovieButtons = document.querySelectorAll('.delete-movie');

    // Fonction pour ajouter un film aux favoris
    function addToFavorites(movieId) {
        const url = `/users/${user.id}/favorites`;

        fetch(url, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ movieId: movieId })
        }).then(response => {
            console.log(response);
            if (response.ok) {
                alert('Film ajouté aux favoris');
            } else {
                alert('Erreur lors de l\'ajout du film aux favoris');
            }
        });
    }

    // Fonction pour retirer un film des favoris
    function removeFromFavorites(movieId) {
        const url = `/users/${user.id}/favorites/${movieId}`;

        fetch(url, {
            method: 'DELETE'
        }).then(response => {
            console.log(response);
            if (response.ok) {
                alert('Film retiré des favoris');
            } else {
                alert('Erreur lors du retrait du film des favoris');
            }
        });
    }

    // Ajoutez des écouteurs d'événements pour les boutons Ajouter aux favoris et Retirer des favoris
    addToFavoritesButtons.forEach(button => {
        button.addEventListener('click', (event) => {
            const movieId = event.target.parentElement.parentElement.dataset.id;
            addToFavorites(movieId);
        });
    });

    removeFromFavoritesButtons.forEach(button => {
        button.addEventListener('click', (event) => {
            const movieId = event.target.parentElement.parentElement.dataset.id;
            removeFromFavorites(movieId);
        });
    });

    // Fonction pour ajouter un film
    async function addMovie(title, director, releaseDate) {
        const url = `/movies`;

        const response = await fetch(url, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ title, director, releaseDate })
        });

        if (response.ok) {
            alert('Film ajouté avec succès');
            location.reload();
        } else {
            alert('Erreur lors de l\'ajout du film');
        }
    }

    // Fonction pour modifier un film
    async function editMovie(movieId, title, director, releaseDate) {
        const url = `/movies/${movieId}`;

        const response = await fetch(url, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ title, director, releaseDate })
        });

        if (response.ok) {
            alert('Film modifié avec succès');
            location.reload();
        } else {
            alert('Erreur lors de la modification du film');
        }
    }

    // Fonction pour supprimer un film
    async function deleteMovie(movieId) {
        const url = `/movies/${movieId}`;

        const response = await fetch(url, {
            method: 'DELETE'
        });

        if (response.ok) {
            alert('Film supprimé avec succès');
            location.reload();
        } else {
            alert('Erreur lors de la suppression du film');
        }
    }

    // Ajoutez des écouteurs d'événements pour les boutons Ajouter, Modifier et Supprimer
    if (addMovieButton) {
        addMovieButton.addEventListener('click', addMovie);
    }

    editMovieButtons.forEach(button => {
        button.addEventListener('click', () => {
            const movieId = button.parentElement.parentElement.getAttribute('data-id');
            editMovie(movieId);
        });
    });

    deleteMovieButtons.forEach(button => {
        button.addEventListener('click', () => {
            const movieId = button.parentElement.parentElement.getAttribute('data-id');
            deleteMovie(movieId);
        });
    });
    </script>
</body>
</html>